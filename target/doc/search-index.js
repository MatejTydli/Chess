var searchIndex = JSON.parse('{\
"simple_chess":{"doc":"This is rust chess library focused on simplicity. Speed is …","t":[13,17,17,17,17,17,17,17,17,13,17,17,17,17,17,17,17,17,13,13,3,13,17,17,17,17,17,17,17,17,4,13,17,17,17,17,17,17,17,17,13,17,17,17,17,17,17,17,17,13,13,17,17,17,17,17,17,17,17,13,4,13,13,13,17,17,17,17,17,17,17,17,3,13,17,17,17,17,17,17,17,17,13,13,13,3,4,13,4,13,13,13,13,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["A","A1","A2","A3","A4","A5","A6","A7","A8","B","B1","B2","B3","B4","B5","B6","B7","B8","Bishop","Black","Board","C","C1","C2","C3","C4","C5","C6","C7","C8","Color","D","D1","D2","D3","D4","D5","D6","D7","D8","E","E1","E2","E3","E4","E5","E6","E7","E8","Eighth","F","F1","F2","F3","F4","F5","F6","F7","F8","Fifth","File","First","Fourth","G","G1","G2","G3","G4","G5","G6","G7","G8","Game","H","H1","H2","H3","H4","H5","H6","H7","H8","King","Knight","Pawn","Piece","PieceType","Queen","Rank","Rook","Second","Seventh","Sixth","Square","Third","White","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","deafult","empty","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_str","into","into","into","into","into","into","into","into","new","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_usize","to_usize","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_usize","try_from_usize","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id"],"q":["simple_chessd":["","","","","","","","","","","","","","","","","","","","","Board stores position and history of position position is …","","","","","","","","","","represent a player or color of their pieces","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","File enum for simple orientation on the board ","","","","","","","","","","","","Game struct is for managing board and timer at once","","","","","","","","","","","","","represent a piece with type and color doesn’t hold any …","represent type of piece ","","rank enum for simple orientation on the board","","","","","represent a part index on board","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","converts File to usize","converts Rank to usize","","","","","","","","","function for converting usize to File if conversion fails …","function for converting usize to Rank if conversion fails …","","","","","","","","","","","","","","","",""],"i":[2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,4,1,0,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,3,2,0,0,0,0,0,0,0,0,3,0,3,3,2,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,4,4,4,0,0,4,0,4,3,3,3,0,3,1,16,7,1,2,3,4,5,6,16,7,1,2,3,4,5,6,1,2,3,4,5,6,1,2,3,4,5,6,7,7,1,2,3,4,5,6,1,2,3,4,5,6,16,7,1,2,3,4,5,6,7,16,7,1,2,3,4,5,6,6,1,2,3,4,5,6,2,3,16,7,1,2,3,4,5,6,2,3,16,7,1,2,3,4,5,6,16,7,1,2,3,4,5,6],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[],7],[[],7],[[1,1],8],[[2,2],8],[[3,3],8],[[4,4],8],[[5,5],8],[[6,6],8],[[1,9],10],[[2,9],10],[[3,9],10],[[4,9],10],[[5,9],10],[[6,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[11,7],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[3,2],6],[[]],[[]],[[]],[[]],[[]],[[]],[2,12],[3,12],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[12,[[13,[2,14]]]],[12,[[13,[3,14]]]],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],13],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15]],"p":[[4,"Color"],[4,"File"],[4,"Rank"],[4,"PieceType"],[3,"Piece"],[3,"Square"],[3,"Board"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[15,"usize"],[4,"Result"],[3,"String"],[3,"TypeId"],[3,"Game"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
